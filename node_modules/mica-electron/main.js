/*
Copyright 2022 GregVido

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

const electron = require('electron');
const { executeDwm, redraw } = require('./build/Release/micaElectron');

function removeFrame(window) {
    const HWND = window.getNativeWindowHandle()["readInt32LE"]();

    const bounds = window.getBounds();

    executeDwm(HWND, PARAMS.FRAME, VALUE.FALSE);
    redraw(HWND, bounds.x, bounds.y, bounds.width, bounds.height);
}

const PARAMS = {
    BACKGROUND: {
        AUTO: 0,
        NONE: 1,
        ACRYLIC: 3,         // Acrylic
        MICA: 2,            // Mica
        TABBED_MICA: 4      // Mica tabbed
    },
    CORNER: 5,
    BORDER_COLOR: 6,
    CAPTION_COLOR: 7,
    TEXT_COLOR: 8,
    FRAME: 9
}

const VALUE = {
    THEME: {
        AUTO: 0,	// select theme by the windows theme
        DARK: 1,	// select the dark theme
        LIGHT: 2,	// select the white theme
    },
    CORNER: {
        DEFAULT: 0,
        DONOTROUND: 1,
        ROUND: 2,
        ROUNDSMALL: 3
    },
    COLOR: {
        RED: 0x000000FF,
        GREEN: 0x0000FF00,
        BLUE: 0x00FF0000,
        BLACK: 0x00000000,
        WHITE: 0x00FFFFFF,
        FROM_RGB: (r, g, b) => {
            return r + (g << 8) + (b << 16);
        }
    },
    FALSE: 0,
    TRUE: 1
}

class BrowserWindow extends electron.BrowserWindow {

    constructor(...args) {
        if (args.length > 0) {
            args[0].transparent = false;
            args[0].backgroundColor = '#00000000';
        } else
            args.push({
                backgroundColor: '#00000000'
            });

        super(...args);

        let interval = null;

        this.lastEffect = args[0].effect || PARAMS.BACKGROUND.MICA;
        this.lastTheme = args[0].theme || VALUE.THEME.AUTO;

        let applyEffect = () => {
            if (args.length > 0) {
                this.setVisualEffect(this.lastEffect, this.lastTheme);
            }
        }

        let frameRemoved  = true;

        this.on('show', () => {
            if (frameRemoved ) {
                frameRemoved  = false;

                if(args[0].frame === false) {
                    this.hide();
                    removeFrame(this);
                    this.show();
                    interval = setInterval(applyEffect, 60);
                }

                applyEffect();
            }
        });

        this.on('closed', () => {
            if(interval)
                clearInterval(interval);
        })
    }

    setVisualEffect(params, value) {
        const HWND = this.getNativeWindowHandle()["readInt32LE"]();
        executeDwm(HWND, params, value);
        this.lastEffect = params;
        this.lastTheme = value;
    }

}

module.exports = {
    PARAMS: PARAMS,
    VALUE: VALUE,
    MicaBrowserWindow: BrowserWindow
};